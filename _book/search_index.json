[["analisis-de-texto.html", "5 Analisis de texto 5.1 Manipulación de texto 5.2 Metacaracteres 5.3 Primer ejercicio 5.4 Ejercicios", " 5 Analisis de texto A veces, lo que queremos analizar es un texto. Los textos, audios e imágenes son datos no estructurados y hay que realizar algún tipo de preparación o estructuración para poder procesarlos automáticamente. En el análisis automático de texto se suelen partir los documentos, y armar lo que se llama un bolsa de palabras, donde se rompe la sintaxis . Ello sirve para medir frecuencias de palabras, cercanía entre ellas, clasificarlas como “positivas” o “negativas” sentimentalmente hablando, etc. La minería de texto tiene diversas herramientas para realizar este tipo de tareas. Las palabras, por su parte, son cadenas de caracteres, y también se pueden manipular de modo automático. Para hacer ello usaremos lo que se conoce como expresiones regulares (“regular expressions” o regex) que permitirá detectar patrones y manipularlos. Las regex son relativamente antiguas (circa 1950) y tuvieron un desarrollo paralelo a la ciencia de datos. Por ello, vienen en varios sabores, cada uno sutilmente diferente al otro. R utiliza regexa través de varios paquetes, entre ellos el stringr de la constelación tidyverse. 5.1 Manipulación de texto En stringr todas las funciones comienza con str_. Usando RStudio, si se presionamos la tecla tab luego de escribir str_ vamos a ver una lista de funciones sugeridas. Por ejemplo, para unir -o concatenar- caracteres se utiliza str_c: library(tidyverse) oracion &lt;- c(&quot;Esta&quot;, &quot;es&quot;, &quot;una&quot;, &quot;cadena&quot;, &quot;de&quot;, &quot;palabras.&quot;) oracion ## [1] &quot;Esta&quot; &quot;es&quot; &quot;una&quot; &quot;cadena&quot; &quot;de&quot; &quot;palabras.&quot; # con `collapse = &quot; &quot;` indicamos que queremos combinar los elementos y separarlos con un espacio oracion &lt;- str_c(oracion, collapse = &quot; &quot;) oracion ## [1] &quot;Esta es una cadena de palabras.&quot; Para extraer caracteres de una palabra se utiliza str_sub. Hay que señalar el comienzo y el final de lo que se quiera extraer, con el número de la posición: frutas &lt;- c(&quot;Manzana&quot;, &quot;Banana&quot;, &quot;Pera&quot;) str_sub(frutas, 1, 3) ## [1] &quot;Man&quot; &quot;Ban&quot; &quot;Per&quot; str_sub(frutas, -3, -1) ## [1] &quot;ana&quot; &quot;ana&quot; &quot;era&quot; Se puede pasar los caracteres a mayúscula, o a minúscula: str_to_lower(frutas) ## [1] &quot;manzana&quot; &quot;banana&quot; &quot;pera&quot; str_to_upper(frutas) ## [1] &quot;MANZANA&quot; &quot;BANANA&quot; &quot;PERA&quot; str_to_sentence(str_c(frutas, collapse = &quot; &quot;)) ## [1] &quot;Manzana banana pera&quot; Una función muy importante nos permite detectar patrones, str_detect, que nos dice si es verdadero o falso que dicho patrón está en el objeto. Para verlo más en detalle, utilizaremos str_view para que la señale en el texto cuando la detecte: frutas ## [1] &quot;Manzana&quot; &quot;Banana&quot; &quot;Pera&quot; str_view(frutas, &quot;an&quot;) ## [1] │ M&lt;an&gt;z&lt;an&gt;a ## [2] │ B&lt;an&gt;&lt;an&gt;a Y ahora es donde comienzan a ponerse interesantes las regex. Por ejemplo, el punto (.) puede reemplazar a cualquie caracter, excepto el salto de línea str_view(frutas, &quot;.an&quot;) ## [1] │ &lt;Man&gt;&lt;zan&gt;a ## [2] │ &lt;Ban&gt;ana Pero si el “punto” reemplaza a cualquier caracter, ¿cómo seleccionamos al caracter “.”? Tenemos que utilizar un “escape” que le diga que estamos refiriendo al caracter y no al regex. para ello, se usa la barra invertida \\, que se denomina escape. Pero, y entonces, ¿cómo difereciamos al escape de la barra invertida?: Para que sepa que es un escape y no una barra invertida, debemos escaparla, de modo que serán dos barras invertidas, más el caracter que queremos escapar… oracion ## [1] &quot;Esta es una cadena de palabras.&quot; str_view(oracion, &quot;.as\\\\.&quot;) ## [1] │ Esta es una cadena de palab&lt;ras.&gt; saludo &lt;- c(&quot;Quiero saludar a los Sres. padres y las Sras. madres&quot;) str_view(saludo, &quot;Sr.s\\\\.&quot;) ## [1] │ Quiero saludar a los &lt;Sres.&gt; padres y las &lt;Sras.&gt; madres str_view_all(saludo, &quot;Sr.s\\\\.&quot;) #para que detecte todas las coincidencias y no solo la primera. ## Warning: `str_view()` was deprecated in stringr 1.5.0. ## ℹ Please use `str_view_all()` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. ## [1] │ Quiero saludar a los &lt;Sres.&gt; padres y las &lt;Sras.&gt; madres 5.2 Metacaracteres 5.2.1 Comienzo y fin de línea -^para buscar solo al comienzo de la línea - $ para buscar solo al final de la línea x &lt;- c(&quot;arándano&quot;, &quot;banana&quot;, &quot;pera&quot;) str_view(x, &quot;^a&quot;) ## [1] │ &lt;a&gt;rándano str_view(x, &quot;a$&quot;) ## [2] │ banan&lt;a&gt; ## [3] │ per&lt;a&gt; 5.2.2 Clases de Palabras Cuando se usan los corchetes, se pueden coincidir una de varias opciones. Mientras que a identifica una “a” y e identifica una “e”, [ae] identifica ya sea una “a” o una “e”. Esto es muy útil para las dudas ortográficas… x &lt;- &quot;Esto es muy necesario, o nesesario?&quot; str_view_all (x, &quot;ne[cs]e[cs]ario&quot;) ## [1] │ Esto es muy &lt;necesario&gt;, o &lt;nesesario&gt;? Entre corchetes, se pueden listar muchas clases de caracteres. Por ejemplo: x &lt;- &quot;Telefono: 3321-4430&quot; str_view(x, &quot;[0123456789]&quot;) ## [1] │ Telefono: &lt;3&gt;&lt;3&gt;&lt;2&gt;&lt;1&gt;-&lt;4&gt;&lt;4&gt;&lt;3&gt;&lt;0&gt; str_view(x, &quot;[0-9]&quot;) # el guión es un metacaracter que indica rango ## [1] │ Telefono: &lt;3&gt;&lt;3&gt;&lt;2&gt;&lt;1&gt;-&lt;4&gt;&lt;4&gt;&lt;3&gt;&lt;0&gt; str_view(x, &quot;[0-9]{8}&quot;) # ¿ por qué no selecciona los ocho números? str_view(x, &quot;[0-9]{4}&quot;) # ahora solo cuatro... ## [1] │ Telefono: &lt;3321&gt;-&lt;4430&gt; str_view(x, &quot;[0-9]{4}.[0-9]{4}&quot;) #vean el punto entre los grupos de números ## [1] │ Telefono: &lt;3321-4430&gt; (telefono &lt;- str_extract(x, &quot;[0-9]{4}.[0-9]{4}&quot;)) ## [1] &quot;3321-4430&quot; Con str_extract() asignamos a la variable telefono el número que leimos automáticamente. Si esto está en un mail o formulario, o algún otro texto, puedo ejecutar el código y leer a través del regex lo que dice. Claro que para ello hay que conocer el tipo de texto que se trata: tengo que saber que el número de teléfono son ocho dígitos separados por un guión. Cuando sé que tipo de patrón estoy buscando, puedo armar un regex para leerlo y procesarlo automáticamente. Y si queremos identificar todos los números de telefono de una planilla, también lo podemos hacer de modo automático. listado &lt;- tibble(nombre = c(&quot;carlos&quot;, &quot;laura&quot;, &quot;pedro&quot;, &quot;maria&quot;, &quot;juan carlos&quot;, &quot;miguel&quot;, &quot;teresa&quot;), telefono = c(&quot;4323-3341&quot;,&quot;4664-9800&quot;, &quot;4121-9073&quot;, NA, &quot;4112-5440&quot;, &quot;3442-1009&quot;, NA)) listado telefonos &lt;- str_extract_all(listado, &quot;[0-9]{4}.[0-9]{4}&quot;) %&gt;% unlist() telefonos ## [1] &quot;4323-3341&quot; &quot;4664-9800&quot; &quot;4121-9073&quot; &quot;4112-5440&quot; &quot;3442-1009&quot; Hay otros metacaracteres muy útiles. [a-z]es una secuencia de todas las letras en minúscula; [A-Z] en mayúscula. Para elegir todos los dígitos, lo podemos hacer con \\\\d, y todos los no dígitos con \\\\D. Con \\\\w todos los caracteres alfanuméricos ([a-zA-Z0-9_]) y con \\\\W todos los no alfanuméricos (símbolos, puntos, etc). Con \\\\s podemos elegir los espacios en blanco (tabulaciones, saltos de línea, etc). Luego, un [^ ] niega lo anterior: [^a-z] matchea lo que no tenga alguna letra (Ojo, ^ actúa distinto si está dentro o fuera de los corchetes. Fuera es un ancla de inicio de línea, dentro es negación de lo siguiente). Una que es muy importante es la alternación |, donde matchea una expresión u otra: \"(Julio|Jul)\" para detectar tanto cuando dice “Julio” o si dice “Jul”. Los paréntesis se usan igual que en matemática, para encerrar conceptos y tratarlos como un único concepto (por ejemplo, para que comience con Julio o Jul puedo poner: ^(Julio|Jul). Sin los paréntesis, sólo buscaría que no comience con “J”). También hay otros metacaracteres para indicar repeticiones: ? repite el anterior una vez: .? será cualquier caracter una vez, o ninguno (es opcional). Luego + repetirá una vez al menos y el resto opcional. Y * repetirá muchas veces de modo opcional o ninguna. Como vimos, en este sabor de regex, un número entre corchetes dice exacto cuántas veces se debe repetir el patrón: {4}. El listado es el siguiente: Metacaracter Nombre Selecciona \\d Dígito un dígito \\s Espacio en blanco cualquier espacio en blanco incluyendo espacios, tabuladores, saltos de línea, [a-z,A-Z] Rango de letras cualquier letra en el rango especificado . Punto cualquier caracter […] Clase de caracteres cualquier caracter de la clase [^…] Negativo de clase de caracteres cualquier caracter que no esté en la clase ? Signo de interrogación Uno permitido, pero es opcional * Asterisco Cualquier cantidad permitida, pero toda son opcional + Más Al menos uno es requerido, más son opcionales | Alternativa Selecciona una expresión o la otra que separa ^ Caret Selecciona la posición al comienzo de la línea $ Peso Selecciona la posición al final de la línea {X,Y} Rango específico X es requerido, máximo Y permitidos 5.2.3 Lookaround Los lookaround nos permiten identificar una posición, y no texto. Luego de identificar esa posición, podemos buscar texto. Esta posición puede ser tanto en referencia a la derecha de… (adelante, lookahead (?= )) como a la izquierda de… (atras, lookbehind (?&gt;= )). Entonces deberíamos pedirle a regex que identifique el lugar desde donde queremos seleccionar algún patrón. Para ello podemos incluso combinarlos: despues de tal patrón y antes de este otro, y luego decirle con qué queremos hacer el match. discurso &lt;- &quot;Sr. Presidente (Gioja).- Corresponde ahora pasar al tiempo destinado a los representantes de los bloques. En primer lugar, el Frente de Todos. Tiene la palabra la señora diputada Aparicio, por Buenos Aires. Sra. Aparicio.- Señor presidente: hoy debatimos de cara a la sociedad, con responsabilidad y transparencia, como nunca se lo ha hecho en este Congreso, la triste historia de procesos de endeudamiento. Sr. Allende.- Señor presidente: quiero destacar la posibilidad que tenemos de analizar este acuerdo con el Fondo. &quot; str_view_all(discurso, &quot;(?&lt;=Sr.?\\\\.\\\\s)(?=\\\\w)\\\\w*&quot;) ## [1] │ Sr. &lt;Presidente&gt; (Gioja).- Corresponde ahora pasar al tiempo destinado a los representantes de los bloques. En primer lugar, el Frente de Todos. Tiene la palabra la señora diputada Aparicio, por Buenos Aires. Sra. &lt;Aparicio&gt;.- Señor presidente: hoy debatimos de cara a la sociedad, con responsabilidad y transparencia, como nunca se lo ha hecho en este Congreso, la triste historia de procesos de endeudamiento. Sr. &lt;Allende&gt;.- Señor presidente: quiero destacar la posibilidad que tenemos de analizar este acuerdo con el Fondo. 5.3 Primer ejercicio La desigualdad estructural de género se manifiesta también en las mayores dificultades que tienen las mujeres para acceder a posiciones de poder. Para comenzar a remediar esto, en diversos países se adoptaron medidas de acción positiva, como las leyes de cupo femenino para garantizar un determinado porcentaje mínimo de diputadas mujeres en relación con los varones. Así, en Argentina, en el año 1991 se adoptó una primera ley que estableció la obligatoriedad de garantizar una mujer entre las primeros tres personas candidatas en las listas de diputados y así sucesivamente, para propender a alcanzar un cupo mínimo del 30% de las bancas en disputas para las mujeres. Recientemente, en el 2017 se aprobó una ley de paridad, en donde se debe garantizar el 50% de las bancas para las mujeres. Una investigadora tuvo la idea de medir esta participación en la práctica, y para ello contó cuántas veces tomó la palabra una mujer y cuántas veces un varón, a partir de la implementación de la ley de paridad. En este ejercicio vamos a intentar medir esto con los regex. Antes de continuar, vamos a instalar un nuevo paquetes de funciones: pdftools, que permite extraer el texto de archivos en formato PDF. Para instalarlo usamos install.packages(), tal como hicimos antes para instalar otros paquetes. install.packages(&quot;pdftools&quot;) Recordemos que sólo hace falta instalar paquetes una vez. Es decir, habiendo ejecutado con éxito la línea install.packages(\"pdftools\") ya no hace falta volver hacerlo la próxima vez que necesitemos recurrir al paquete. Ya quedó instalado en nuestro sistema 5.3.1 Consiguiendo los datos La página de la Cámara de Diputados de Argentina tiene cargadas los diarios de las sesiones de los distintos años. De allí, tomamos una que nos interese y la descargamos. Vamos a empezar con la sesión 19 del período 138. Para ello leeremos el texto del archivo pdf con pdf_text() y como lo lee por página, luego lo collapsaremos con str_c() como ya vimos. library(pdftools) periodo138 &lt;- tibble (texto = pdf_text(&quot;https://cdaj.netlify.app/data/sesiones/138-19.pdf&quot;) %&gt;% str_c(collapse = &quot; &quot;)) Una ventaja de la programación es la reproducibilidad. Y para ello, en general, es útil descargar las bases de datos directamente desde las paginas web. Sin embargo, los links muchas veces cambian y las paginas cuando menos lo esperamos, caen. Por ello, siempre es mejor tener una copia de la base en nuestra PC o nuestra nube y referenciarla de allí. Las celdas no tienen limite máximo de capacidad, y entonces colocamos toda la versión taquigráfica en una celda en una fila. 5.3.2 Limpieza de datos El texto tiene muchos caracteres que son parte del formato, y que deberíamos limpiar de modo previo a hacer el análisis. La etapa de limpieza debe tener en cuenta cuál es el objetivo de los datos y del análisis. Para nuestro ejercicio, en tanto vamos a medir cuántas veces toman la palabra los diputados y las diputadas, deberíamos eliminar cada vez que toma la palabra el Sr. o la Sra. Presidenta o el Sr. Secretario. Eliminamos también todos los saltos que figuran como \\\\n (recuerden que para seleccionar una barra tenemos que escaparla dos veces). limpio &lt;- periodo138 %&gt;% mutate(texto = str_replace_all(texto, &#39;\\\\s|\\\\n|\\\\\\\\n|\\\\\\&quot;&#39;, &quot; &quot;)) limpio &lt;- limpio %&gt;% mutate(texto = str_remove_all(texto, &quot;Sr.\\\\s+Presidente|Sr.\\\\s+Secretario|Sra.\\\\s+Presidenta&quot;)) 5.3.3 Análisis En este ejercicio sólo queremos contar cuántas veces toma la palabra una diputada mujer y cuántas uno varón. Afortunadamente, en la versión taquigráfica, cada vez que comienza a hablar un diputado varón lo refieren como “Sr. xxxx” y cada vez que comienza a hablar una diputada mujer la refieren como “Sra. yyyy”. Por ello, nos alcanza con contar cuántas veces dice “Sr.” y cuántas “Sra.”. cantidad &lt;- limpio %&gt;% mutate(varon = str_count(texto, &quot;Sr.&quot;), mujer = str_count(texto, &quot;Sra.&quot;), ratio = round(varon/mujer,3)) Esto significa que en promedio, durante el período de estudio, los varones hablaron 3.188 veces más que las mujeres. 5.3.4 Quienes hablaron? Y también podemos analizar quiénes tomaron la palabra en cada sesión. Con el código de lookaround que usamos arriba, podemos agregar una columna “toman_palabra” que contenga una lista con los nombres que se registran tomando la palabra en cada sesión: quienes &lt;- limpio %&gt;% mutate(toman_palabra = str_extract_all(texto, &quot;(?&lt;=Sr.?\\\\.\\\\s)\\\\w+&quot;)) quienes$toman_palabra ## [[1]] ## [1] &quot;Ortega&quot; &quot;Verón&quot; &quot;Negri&quot; &quot;Asseff&quot; ## [5] &quot;Asseff&quot; &quot;Reyes&quot; &quot;Reyes&quot; &quot;Matzen&quot; ## [9] &quot;Negri&quot; &quot;Casas&quot; &quot;Leiva&quot; &quot;Cano&quot; ## [13] &quot;Manzi&quot; &quot;Iglesias&quot; &quot;Heller&quot; &quot;Wolff&quot; ## [17] &quot;Moreau&quot; &quot;Mounier&quot; &quot;Carnaghi&quot; &quot;Carnaghi&quot; ## [21] &quot;Cano&quot; &quot;Wolff&quot; &quot;Parola&quot; &quot;Frade&quot; ## [25] &quot;de&quot; &quot;de&quot; &quot;de&quot; &quot;de&quot; ## [29] &quot;de&quot; &quot;Moreau&quot; &quot;Soria&quot; &quot;Soria&quot; ## [33] &quot;Iglesias&quot; &quot;Moreau&quot; &quot;Iglesias&quot; &quot;Tailhade&quot; ## [37] &quot;Salvador&quot; &quot;Salvador&quot; &quot;Salvador&quot; &quot;Yasky&quot; ## [41] &quot;del&quot; &quot;del&quot; &quot;Grande&quot; &quot;Arce&quot; ## [45] &quot;Giordano&quot; &quot;Schlereth&quot; &quot;Cornejo&quot; &quot;Cornejo&quot; ## [49] &quot;Fernández&quot; &quot;Fernández&quot; &quot;Fernández&quot; &quot;Gutiérrez&quot; ## [53] &quot;Moisés&quot; &quot;Martínez&quot; &quot;Zottos&quot; &quot;Cerruti&quot; ## [57] &quot;Cerruti&quot; &quot;Iglesias&quot; &quot;Iglesias&quot; &quot;Halac&quot; ## [61] &quot;Heller&quot; &quot;Vallejos&quot; &quot;Vallejos&quot; &quot;Rauschenberger&quot; ## [65] &quot;Hagman&quot; &quot;Iglesias&quot; &quot;Hagman&quot; &quot;Laspina&quot; ## [69] &quot;Pastori&quot; &quot;Pastori&quot; &quot;Sarghini&quot; &quot;Cassinerio&quot; ## [73] &quot;Ramón&quot; &quot;Sapag&quot; &quot;del&quot; &quot;Giordano&quot; ## [77] &quot;López&quot; &quot;Koenig&quot; &quot;Contigiani&quot; &quot;Aparicio&quot; ## [81] &quot;Menna&quot; &quot;Fernández&quot; &quot;Fernández&quot; &quot;Campos&quot; ## [85] &quot;Campos&quot; &quot;Campos&quot; &quot;Campos&quot; &quot;Ponce&quot; ## [89] &quot;Ponce&quot; &quot;Ponce&quot; &quot;Fregonese&quot; &quot;Lehmann&quot; ## [93] &quot;Uceda&quot; &quot;Martín&quot; &quot;Martín&quot; &quot;Burgos&quot; ## [97] &quot;Piccolomini&quot; &quot;Fernández&quot; &quot;Laspina&quot; &quot;Heller&quot; ## [101] &quot;Gioja&quot; &quot;Mestre&quot; &quot;Penacca&quot; &quot;Penacca&quot; ## [105] &quot;Penacca&quot; &quot;Pértile&quot; &quot;Mosqueda&quot; &quot;Mosqueda&quot; ## [109] &quot;Figueroa&quot; &quot;Pastori&quot; &quot;Heller&quot; &quot;Nani&quot; ## [113] &quot;Orrego&quot; &quot;Burgos&quot; &quot;Navarro&quot; &quot;Fernández&quot; ## [117] &quot;Fernández&quot; &quot;Martínez&quot; &quot;Martiarena&quot; &quot;Rey&quot; ## [121] &quot;Camaño&quot; &quot;Zottos&quot; &quot;Di&quot; &quot;Sapag&quot; ## [125] &quot;Giordano&quot; &quot;Giordano&quot; &quot;Giordano&quot; &quot;Giordano&quot; ## [129] &quot;Giordano&quot; &quot;Giordano&quot; &quot;Martínez&quot; &quot;Bucca&quot; ## [133] &quot;Di&quot; &quot;Burgos&quot; &quot;Cornejo&quot; &quot;Estevez&quot; ## [137] &quot;Flores&quot; &quot;Gaillard&quot; &quot;García&quot; &quot;Igon&quot; ## [141] &quot;Lampreabe&quot; &quot;Martínez&quot; &quot;Bernazza&quot; &quot;Brizuela&quot; ## [145] &quot;Cisneros&quot; &quot;García&quot; &quot;Gioja&quot; &quot;Hernández&quot; ## [149] &quot;Jetter&quot; &quot;Landriscini&quot; &quot;Latorre&quot; &quot;Lena&quot; ## [153] &quot;López&quot; &quot;Mestre&quot; &quot;Morales&quot; &quot;Najul&quot; ## [157] &quot;Riccardo&quot; &quot;Schiavoni&quot; &quot;Tonelli&quot; &quot;Uhrig&quot; ## [161] &quot;Yutrovic&quot; &quot;Massín&quot; &quot;del&quot; &quot;Amaya&quot; ## [165] &quot;Amaya&quot; &quot;Delú&quot; &quot;Leiva&quot; &quot;Ritondo&quot; ## [169] &quot;Vigo&quot; &quot;Ramón&quot; &quot;del&quot; &quot;Giordano&quot; ## [173] &quot;Hernández&quot; &quot;Pastori&quot; &quot;Sarghini&quot; &quot;Quetglas&quot; ## [177] &quot;Alderete&quot; &quot;Carrizo&quot; &quot;Yutrovic&quot; &quot;Yutrovic&quot; ## [181] &quot;Casaretto&quot; &quot;Brizuela&quot; &quot;González&quot; &quot;Kirchner&quot; ## [185] &quot;Menna&quot; &quot;Nanni&quot; &quot;Negri&quot; &quot;Marziotta&quot; ## [189] &quot;Marziotta&quot; &quot;Marziotta&quot; &quot;Asseff&quot; &quot;Figueroa&quot; ## [193] &quot;Igon&quot; &quot;Suárez&quot; &quot;Heller&quot; &quot;Pastori&quot; ## [197] &quot;Moreau&quot; &quot;Riccardo&quot; &quot;Riccardo&quot; &quot;Riccardo&quot; ## [201] &quot;Riccardo&quot; &quot;Bernazza&quot; &quot;Landriscini&quot; &quot;Landriscini&quot; ## [205] &quot;Alume&quot; &quot;Austin&quot; &quot;Ferraro&quot; &quot;Iglesias&quot; ## [209] &quot;Iglesias&quot; &quot;Carrizo&quot; &quot;Camaño&quot; &quot;Sapag&quot; ## [213] &quot;del&quot; &quot;del&quot; &quot;Giordano&quot; &quot;Giordano&quot; ## [217] &quot;Giordano&quot; &quot;Iglesias&quot; &quot;Giordano&quot; &quot;Morales&quot; ## [221] &quot;Figueroa&quot; &quot;Matzen&quot; &quot;Yedlin&quot; &quot;Najul&quot; ## [225] &quot;Carro&quot; &quot;Ferraro&quot; &quot;Camaño&quot; &quot;Ritondo&quot; ## [229] &quot;Ritondo&quot; &quot;Bazze&quot; &quot;Campos&quot; &quot;Fernández&quot; ## [233] &quot;Ferraro&quot; &quot;González&quot; &quot;López&quot; &quot;Manzi&quot; ## [237] &quot;Martínez&quot; &quot;Morales&quot; &quot;Oliveto&quot; &quot;Polledo&quot; ## [241] &quot;Stilman&quot; &quot;Terada&quot; &quot;Yacobitti&quot; &quot;Félix&quot; ## [245] &quot;Félix&quot; Ahora podemos crear una columna que contenga conteos de la cantidad de veces que aparece cada nombre tomando la palabra, en cada fila. Esta vez el contenido de cada item en la nueva columna será una tabla de frecuencias: quienes &lt;- table(quienes$toman_palabra) %&gt;% as.data.frame() %&gt;% arrange(desc(Freq)) head(quienes,10) 5.4 Ejercicios En la última tabla pudimos ver en concreto quién habló y cuántas veces lo hizo. Pero notemos que aparecen algunos “del” y “de” sueltos… ¡falta el resto de esos apellidos!. ¿Cómo podríamos identificarlos y contarlos de modo separado a \"DE LA SOTA, NATALIA\", \"DE LOREDO, RODRIGO\", \"DEL PLA, ROMINA\", etc? Descarguemos un tomo de jurisprudencia de la Corte Suprema de Justicia de la Nación (https://sjservicios.csjn.gov.ar/sj/tomosFallos.do?method=iniciar), o la similar en otros países, y extraigamos las citas a precedentes: \"Fallos xxx:xxx\" "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
