[["analisis-de-texto.html", "5 Analisis de texto 5.1 Manipulación de texto 5.2 Metacaracteres 5.3 Primer ejercicio 5.4 Ejercicios", " 5 Analisis de texto A veces, lo que queremos analizar es un texto. Los textos, audios e imágenes son datos no estructurados y hay que realizar algún tipo de preparación o estructuración para poder procesarlos automáticamente. En el análisis automático de texto se suelen partir los documentos, y armar lo que se llama un bolsa de palabras, donde se rompe la sintaxis . Ello sirve para medir frecuencias de palabras, cercanía entre ellas, clasificarlas como “positivas” o “negativas” sentimentalmente hablando, etc. La minería de texto tiene diversas herramientas para realizar este tipo de tareas. Las palabras, por su parte, son cadenas de caracteres, y también se pueden manipular de modo automático. Para hacer ello usaremos lo que se conoce como expresiones regulares (“regular expressions” o regex) que permitirá detectar patrones y manipularlos. Las regex son relativamente antiguas (circa 1980) y tuvieron un desarrollo paralelo a la ciencia de datos. Por ello, vienen en varios sabores, cada uno sutilmente diferente al otro. R utiliza regexa través de varios paquetes, entre ellos el stringr de la constelación tidyverse. 5.1 Manipulación de texto En stringr todas las funciones comienza con str_. Usando RStudio, si se presionamos la tecla tab luego de escribir str_ vamos a ver una lista de funciones sugeridas. Por ejemplo, para unir -o concatenar- caracteres se utiliza str_c: library(tidyverse) oracion &lt;- c(&quot;Esta&quot;, &quot;es&quot;, &quot;una&quot;, &quot;cadena&quot;, &quot;de&quot;, &quot;palabras.&quot;) oracion ## [1] &quot;Esta&quot; &quot;es&quot; &quot;una&quot; &quot;cadena&quot; &quot;de&quot; &quot;palabras.&quot; # con `collapse = &quot; &quot;` indicamos que queremos combinar los elementos separados con un espacio oracion &lt;- str_c(oracion, collapse = &quot; &quot;) oracion ## [1] &quot;Esta es una cadena de palabras.&quot; Para extraer caracteres de una palabra se utiliza str_sub. Hay que señalar el comienzo y el final de lo que se quiera extraer: frutas &lt;- c(&quot;Manzana&quot;, &quot;Banana&quot;, &quot;Pera&quot;) str_sub(frutas, 1, 3) ## [1] &quot;Man&quot; &quot;Ban&quot; &quot;Per&quot; str_sub(frutas, -3, -1) ## [1] &quot;ana&quot; &quot;ana&quot; &quot;era&quot; Se puede pasar los caracteres a mayúscula, o a minúscula: str_to_lower(frutas) ## [1] &quot;manzana&quot; &quot;banana&quot; &quot;pera&quot; str_to_upper(frutas) ## [1] &quot;MANZANA&quot; &quot;BANANA&quot; &quot;PERA&quot; str_to_sentence(str_c(frutas, collapse = &quot; &quot;)) ## [1] &quot;Manzana banana pera&quot; Una función muy importante nos permite detectar patrones, str_detect. Utilizaremos str_view para que la señale en el texto cuando la detecte: frutas ## [1] &quot;Manzana&quot; &quot;Banana&quot; &quot;Pera&quot; str_view(frutas, &quot;an&quot;) Y ahora es donde comienzan a resultar interesantes las regex. Por ejemplo, el punto (.) puede reemplazar a cualquie caracter, excepto el salto de línea str_view(frutas, &quot;.an&quot;) Pero si el “punto” reemplaza a cualquier caracter, ¿cómo seleccionamos al caracter “.”? Tenemos que utilizar un “escape” que le diga que estamos refiriendo al caracter y no al regex. para ello, se usa la barra invertida, que se denomina escape. Pero para que sepa que es un escape y no una barra invertida, debemos usar dos barras invertidas… oracion ## [1] &quot;Esta es una cadena de palabras.&quot; str_view(oracion, &quot;.as\\\\.&quot;) saludo &lt;- c(&quot;Quiero saludar a los Sres. padres y las Sras. madres&quot;) str_view(saludo, &quot;Sr.s\\\\.&quot;) str_view_all(saludo, &quot;Sr.s\\\\.&quot;) #para que detecte todas las coincidencias y no solo la primera. 5.2 Metacaracteres 5.2.1 Comienzo y fin de línea -^para buscar solo al comienzo de la línea - $ para buscar solo al final de la línea x &lt;- c(&quot;arándano&quot;, &quot;banana&quot;, &quot;pera&quot;) str_view(x, &quot;^a&quot;) str_view(x, &quot;a$&quot;) 5.2.2 Clases de Palabras Cuando se usan los corchetes, se pueden coincidir una de varias opciones. Mientras que a identifica una “a” y e identifica una “e”, [ae] identifica una “a” o una “e”. x &lt;- &quot;Esto es muy necesario, o nesesario?&quot; str_view_all (x, &quot;ne[cs]e[cs]ario&quot;) Se pueden listar muchas clases de caracteres. Por ejemplo x &lt;- &quot;Telefono: 3321-4430&quot; str_view(x, &quot;[0123456789]&quot;) str_view(x, &quot;[0-9]&quot;) # el guión es un metacaracter que indica rango str_view(x, &quot;[0-9]{8}&quot;) # ¿ por qué no selecciona los ocho números? str_view(x, &quot;[0-9]{4}&quot;) # ahora solo cuatro... str_view(x, &quot;[0-9]{4}.[0-9]{4}&quot;) #vean el punto entre los grupos de números (telefono &lt;- str_extract(x, &quot;[0-9]{4}.[0-9]{4}&quot;)) ## [1] &quot;3321-4430&quot; Con str_extract() asigné a una variable telefono el número que leimos automáticamente. Si esto está en un mail o formulario, o algún otro texto, puedo ejecutar el código y leer a través del regex lo que dice. Claro que para ello hay que conocer el tipo de texto que se trata: tengo que saber que el número de teléfono son ocho dígitos separados por un guión. Cuando sé que tipo de patrón estoy buscando, puedo armar un regex para leerlo y procesarlo automágicamente. Y si queremos identificar todos los números de telefono de una planilla, también lo podemos hacer de modo automático. listado &lt;- tibble(nombre = c(&quot;carlos&quot;, &quot;laura&quot;, &quot;pedro&quot;, &quot;maria&quot;, &quot;juan carlos&quot;, &quot;miguel&quot;, &quot;teresa&quot;), telefono = c(&quot;4323-3341&quot;,&quot;4664-9800&quot;, &quot;4121-9073&quot;, NA, &quot;4112-5440&quot;, &quot;3442-1009&quot;, NA)) listado telefonos &lt;- str_extract_all(listado, &quot;[0-9]{4}.[0-9]{4}&quot;) %&gt;% unlist() telefonos ## [1] &quot;4323-3341&quot; &quot;4664-9800&quot; &quot;4121-9073&quot; &quot;4112-5440&quot; &quot;3442-1009&quot; Hay otros metacaracteres muy útiles. [a-z]es una secuencia de todas las letras en minúscula; [A-Z] en mayúscula. Para elegir todos los dígitos, lo podemos hacer con \\\\d, y todos los no dígitos con \\\\D. Con \\\\w todos los caracteres alfanuméricos ([a-zA-Z0-9_]) y con \\\\W todos los no alfanuméricos (símbolos, puntos, etc). Con \\\\s podemos elegir todos los espacios en blanco. Luego, un [^ ] niega lo anterior: [^a-z] matchea lo que no tenga alguna letra (Ojo, ^ actúa distinto si está dentro o fuera de los corchetes. Fuera es un ancla de inicio de línea, dentro es negación de lo siguiente). Una que es muy importante es la alternación |, donde matchea una expresión u otra: \"(Julio|Jul)\" para detectar tanto cuando dice “Julio” o si dice “Jul”. Los paréntesis se usan igual que en matemática, para encerrar conceptos y tratarlos como un único concepto (por ejemplo, para que comience con Julio o Jul puedo poner: ^(Julio|Jul). Sin los paréntesis, sólo buscaría que no comience con “J”). El listado es el siguiente: 5.2.3 Lookaround Los lookaround nos permiten identificar una posición, y no texto. Luego de identificar esa posición, podemos buscar texto. Esta posición puede ser tanto en referencia a la derecha (adelante, lookahead (?= )) como a la izquierda (atras, lookbehind (?&gt;= )). Entonces deberíamos pedirle a regex que identifique el lugar desde donde queremos seleccionar algún patrón. Para ello podemos incluso combinarlos: despues de tal patrón y antes de este otro, y luego decirle con qué queremos hacer el match. discurso &lt;- &quot;Sr. Presidente (Gioja).- Corresponde ahora pasar al tiempo destinado a los representantes de los bloques. En primer lugar, el Frente de Todos. Tiene la palabra la señora diputada Aparicio, por Buenos Aires. Sra. Aparicio.- Señor presidente: hoy debatimos de cara a la sociedad, con responsabilidad y transparencia, como nunca se lo ha hecho en este Congreso, la triste historia de procesos de endeudamiento. Sr. Allende.- Señor presidente: quiero destacar la posibilidad que tenemos de analizar este acuerdo con elFondo. &quot; str_view_all(discurso, &quot;(?&lt;=Sr.?\\\\.\\\\s)(?=\\\\w)\\\\w*&quot;) 5.3 Primer ejercicio La desigualdad estructural de género se manifiesta también en las mayores dificultades que tienen las mujeres para acceder a posiciones de poder. Para comenzar a remediar esto, en diversos países se adoptaron medidas de acción positiva como son las leyes de cupo femenino para garantizar un determinado porcentaje mínimo de diputadas mujeres en relación con los varones. Así, en Argentina, en el año 1991 se adoptó una primera ley que estableció la obligatoriedad de garantizar una mujer entre las primeros tres personas candidatas en las listas de diputados y así sucesivamente, para propender a alcanzar que accedan al 30% de las bancas en disputas. Recientemente, en el 2017 se aprobó una ley de paridad, en donde se debe garantizar el 50% de las bancas para las mujeres. Una compañera tuvo la idea de medir esta participación en la práctica, y para ello quiso contar cuántas veces tomó la palabra una mujer y cuántas veces un varón, a partir de la implementación de la paridad. En este ejercicio vamos a intentar medir esto. Antes de continuar, vamos a instalar un nuevo paquetes de funciones: pdftools, que permite extraer el texto de archivos en formato PDF. Para instalarlo usamos install.packages(), tal como hicimos antes para instalar otros paquetes. install.packages(&quot;pdftools&quot;) Recordemos que sólo hace falta instalar paquetes una vez. Es decir, habiendo ejecutado con éxito la línea install.packages(\"pdftools\") ya no hace falta volver hacerlo la próxima vez que necesitemos recurrir al paquete. Ya quedó instalado en nuestro sistema 5.3.1 Consiguiendo los datos La página de la Cámara de Diputados de Argentina tiene una pequeña sección de datos abiertos, en https://datos.hcdn.gob.ar/. De allí podemos descargar un dataset con todas las sesiones que hubo, por período parlamentario. library(pdftools) sesiones &lt;- read.csv(&quot;https://cdaj.netlify.app/data/sesiones/sesiones.csv&quot;) Una ventaja de la programación es la reproducibilidad. Y para ello, en general, es útil descargar las bases de datos directamente desde las paginas web. Sin embargo, los links muchas veces cambian y las paginas cuando menos lo esperamos, caen. Por ello, siempre es mejor tener una copia de la base en nuestra PC o nuestra nube y referenciarla de allí. Para este ejercicio utilizaremos solamente el período del año 2020, número 138. Del sitio web de la Cámara de Diputados podemos o bien vincular las versiones taquigráficas o bien descargarlas a la PC. Con ello, podremos cargarlas en nuestra tabla. Una vez descargadas o identificados los links, agregamos una columna con el link para luego descargar el texto. periodo138 &lt;- sesiones %&gt;% filter(str_detect(periodo_id, &quot;138&quot;), reunion_tipo != &quot;Apertura Ordinarias&quot;) periodo138 &lt;- periodo138 %&gt;% mutate(reunion_nombre = paste0(&quot;138-&quot;, reunion_numero)) periodo138 &lt;- periodo138 %&gt;% mutate(link = paste0(&quot;https://cdaj.netlify.app/data/sesiones/&quot;, reunion_nombre, &quot;.pdf&quot;)) Nuestra lista de sesiones, ahora con una columna con el link a su transcripción, luce así: periodo138 Y ahora leemos los documentos y los agregamos a nuestra tabla. Las celdas no tienen limite de capacidad, y entonces colocamos cada versión taquigráfica en una celda en la fila de la sesión respectiva. Para hacer esto usaremos la función map para que la función que lee PDFs (pdf_text) se ejecute cada vez en cada fila de nuestro dataframe. periodo138 &lt;- periodo138 %&gt;% mutate(texto = map(link, pdf_text)) # puede demorar algunos minutos! Ojo. Ahora en la tabla hay mucha información, lo que resulta pesado para las computadoras. Puede ser que si queremos visualizar la tabla se cuelgue la computadora o se haga muy lenta. Entonces, habrá que evitar abrir la tabla entera. Mejor es llamar a las celdas individualmente desde la consola 5.3.2 Limpieza de datos El texto tiene muchos caracteres que son parte del formato, y que deberíamos limpiar de modo previo a hacer el análisis. La etapa de limpieza debe tener en cuenta cuál es el objetivo de los datos y del análisis. Para nuestro ejercicio, en tanto vamos a medir cuántas veces toman la palabra los diputados y las diputadas, deberíamos eliminar cada vez que toma la palabra el Sr. Presidente o el Sr. Secretario. Eliminamos también todos los saltos que figuran como \\\\n (recuerden que para seleccionar una barra tenemos que escaparla cuatro veces). limpio &lt;- periodo138 %&gt;% mutate(texto = str_replace_all(texto, &quot;\\\\s|\\\\\\\\\\\\\\\\n|\\\\\\\\n?|\\\\\\\\f|\\\\\\\\\\\\\\\\n?|\\\\n&quot;, &quot; &quot;)) limpio &lt;- periodo138 %&gt;% mutate(texto = str_remove_all(texto, &quot;Sr. Presidente|Sr. Secretario|Sra. Presidenta&quot;)) rm(periodo138) #remuevo el objeto para liberar un poco de memoria 5.3.3 Análisis En este ejercicio sólo queremos contar cuántas veces toma la palabra una diputada mujer y cuántas uno varón. Afortunadamente, en la versión taquigráfica, cada vez que comienza a hablar un diputado varón lo refieren como “Sr. xxxx” y cada vez que comienza a hablar una diputada mujer la refieren como “Sra. yyyy”. Por ello, nos alcanza con contar cuántas veces dice “Sr.” y cuántas “Sra.”. cantidad &lt;- limpio %&gt;% mutate(varon = str_count(texto, &quot;Sr.&quot;), mujer = str_count(texto, &quot;Sra.&quot;), ratio = round(varon/mujer,3)) %&gt;% select(-reunion_numero, -sesion_numero,-texto, -link, -sesion_camara, -periodo_id, -reunion_fin) cantidad Y si queremos ver el promedio, calculamos mean(cantidad$ratio) ## [1] 3.216895 Esto significa que en promedio, durante el período de estudio, los varones hablaron 3 veces más que las mujeres. 5.3.4 Quienes hablaron? Y también podemos analizar quiénes tomaron la palabra en cada sesión, con el código de lookaround que hicimos arriba. Agregaremos una listado por fila. quienes &lt;- limpio %&gt;% mutate(quienes = str_extract_all(texto, &quot;(?&lt;=Sr.?\\\\.\\\\s)(?=\\\\w)\\\\w*&quot;)) %&gt;% select(-reunion_numero, -sesion_numero,-texto, -link, -sesion_camara, -periodo_id, -reunion_fin) listado &lt;- tibble(as.data.frame(table(quienes$quienes[1]) )) %&gt;% arrange(desc(Freq)) listado 5.4 Ejercicios En la última tabla pudimos ver en concreto quién habló y cuántas veces lo hizo. Pero notemos que aparecen algunos “del” y “de” sueltos… ¡falta el resto de esos apellidos!. ¿Cómo podríamos obtener el apellido completo de \"DE LA SOTA, NATALIA\", \"DE LOREDO, RODRIGO\", \"DEL PLA, ROMINA\", etc? Descarguemos un tomo de jurisprudencia de la Corte Suprema de Justicia de la Nación (https://sjservicios.csjn.gov.ar/sj/tomosFallos.do?method=iniciar), o la similar en otros países, y extraigamos las citas a precedentes: \"Fallos xxx:xxx\" "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
